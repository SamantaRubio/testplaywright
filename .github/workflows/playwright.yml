name: Playwright Automation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            pw-browsers-${{ runner.os }}-

      - name: Install deps & browsers
        run: |
          npm ci
          npx playwright install --with-deps chromium firefox webkit

      - name: Create .env from secrets
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
          

      - name: Run smoke tests
        env:
          CI: true
        run: npx playwright test tests/smoke

      - name: Upload HTML report (smoke)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-smoke
          path: playwright-report
          if-no-files-found: ignore
  
      - name: Upload JSON summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.job }}   # ⬅️ nombres: results-smoke, results-performance, etc.
          path: results.json
          if-no-files-found: ignore
  

  performance:
    if: github.event_name == 'pull_request'
    needs: smoke
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            pw-browsers-${{ runner.os }}-

      - name: Install deps & browsers
        run: |
          npm ci
          npx playwright install --with-deps chromium firefox webkit

      - name: Create .env from secrets
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env

      - name: Run performance tests
        env:
          CI: true
        run: npx playwright test tests/performance

      - name: Upload HTML report (performance)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-performance
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload JSON summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.job }} 
          path: results.json
          if-no-files-found: ignore

  regression:
    if: github.event_name == 'pull_request'
    needs: smoke
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            pw-browsers-${{ runner.os }}-

      - name: Install deps & browsers
        run: |
          npm ci
          npx playwright install --with-deps chromium firefox webkit

      - name: Create .env from secrets
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env

      - name: Run regression tests
        env:
          CI: true
        run: npx playwright test tests/regression

      - name: Upload HTML report (regression)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-regression
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload JSON summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.job }} 
          path: results.json
          if-no-files-found: ignore

  e2e:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: smoke
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            pw-browsers-${{ runner.os }}-

      - name: Install deps & browsers
        run: |
          npm ci
          npx playwright install --with-deps chromium firefox webkit

      - name: Create .env from secrets
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env

      - name: Run e2e tests
        env:
          CI: true
        run: npx playwright test tests/e2e

      - name: Upload HTML report (e2e)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-e2e
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload JSON summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.job }} 
          path: results.json
          if-no-files-found: ignore
          
  notify-slack-pr:
    if: github.event_name == 'pull_request'
    needs: [smoke, performance, regression]  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for helper script)
        uses: actions/checkout@v4

      # === 1) Descargamos sólo summaries (results.json) de cada job ===
      - name: Download smoke summary
        uses: actions/download-artifact@v4
        with:
          name: results-smoke
          path: artifacts/smoke
        continue-on-error: true

      - name: Download performance summary
        uses: actions/download-artifact@v4
        with:
          name: results-performance
          path: artifacts/performance
        continue-on-error: true

      - name: Download regression summary
        uses: actions/download-artifact@v4
        with:
          name: results-regression
          path: artifacts/regression
        continue-on-error: true

      # e2e es opcional: si existe lo descargamos, si no, seguimos
      - name: Download e2e summary (optional)
        uses: actions/download-artifact@v4
        with:
          name: results-e2e
          path: artifacts/e2e
        continue-on-error: true

      # === 2) Construimos resumen y detectamos si hubo fallos ===
      - name: Build summary (Node)
        id: summary
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          function readJsonSafe(p) {
            try { if (fs.existsSync(p)) return JSON.parse(fs.readFileSync(p,'utf8')); }
            catch(_) {}
            return null;
          }

          const jobs = ['smoke','performance','regression','e2e'];
          const perJob = {};
          const total = { passed:0, failed:0, flaky:0, skipped:0, durationMs:0, tests:0 };

          function walkSuite(suite, acc) {
            if (!suite) return;
            if (suite.specs) {
              for (const spec of suite.specs) {
                for (const test of spec.tests || []) {
                  const results = test.results || [];
                  const last = results[results.length - 1] || {};
                  const status = last.status || test.status || 'skipped';
                  acc.tests += 1;
                  if (status === 'passed') acc.passed += 1;
                  else if (status === 'failed') acc.failed += 1;
                  else if (status === 'flaky') acc.flaky += 1;
                  else acc.skipped += 1;
                  const d = (last.duration || last.durationMs || 0);
                  acc.durationMs += d;
                }
              }
            }
            for (const child of (suite.suites || [])) walkSuite(child, acc);
          }

          for (const job of jobs) {
            const jsonPath = path.join('artifacts', job, 'results.json');
            const data = readJsonSafe(jsonPath);
            if (!data) continue;
            const acc = { passed:0, failed:0, flaky:0, skipped:0, durationMs:0, tests:0 };
            for (const s of (data.suites || [])) walkSuite(s, acc);
            perJob[job] = acc;
            total.passed += acc.passed;
            total.failed += acc.failed;
            total.flaky  += acc.flaky;
            total.skipped+= acc.skipped;
            total.tests  += acc.tests;
            total.durationMs += acc.durationMs;
          }

          function fmt(ms){
            const s = Math.round(ms/1000);
            const m = Math.floor(s/60);
            const r = s % 60;
            return `${m}m ${r}s`;
          }

          let lines = [];
          lines.push(`*Playwright summary – ${new Date().toISOString()}*`);
          lines.push(`*Total:* ${total.tests} tests | ✅ ${total.passed}  ❌ ${total.failed}  ~ ${total.flaky}  ⏭️ ${total.skipped} | ⏱ ${fmt(total.durationMs)}`);
          for (const job of Object.keys(perJob)) {
            const a = perJob[job];
            lines.push(`• *${job}*: ${a.tests} | ✅ ${a.passed}  ❌ ${a.failed}  ⏭️ ${a.skipped} | ⏱ ${fmt(a.durationMs)}`);
          }

          const summary = lines.join('\n');
          const hasFailures = total.failed > 0 ? 'true' : 'false';

          // Export outputs
          const out = process.env.GITHUB_OUTPUT;
          fs.appendFileSync(out, `summary<<EOF\n${summary}\nEOF\n`);
          fs.appendFileSync(out, `has_failures=${hasFailures}\n`);
          NODE

      # === 3) Publicamos SIEMPRE el resumen a Slack ===
      - name: Post summary to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SUMMARY: ${{ steps.summary.outputs.summary }}
        run: |
          jq -n --arg channel "$SLACK_CHANNEL_ID" --arg text "$SUMMARY" '{
            "channel": $channel,
            "text": $text
          }' > payload.json

          curl -s -X POST "https://slack.com/api/chat.postMessage" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data @payload.json \
          | jq .

      # === 4) Solo si hubo fallos: descargamos reports, zipeamos y subimos a Slack ===
      - name: Download smoke report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-smoke
          path: artifacts/smoke/report
        continue-on-error: true

      - name: Download performance report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-performance
          path: artifacts/performance/report
        continue-on-error: true

      - name: Download regression report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-regression
          path: artifacts/regression/report
        continue-on-error: true

      - name: Download e2e report (on failure, optional)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-e2e
          path: artifacts/e2e/report
        continue-on-error: true

      - name: Zip reports (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        run: |
          set -e
          shopt -s nullglob
          for dir in artifacts/*/report; do
            job=$(basename "$(dirname "$dir")")
            (cd "$dir" && zip -r "../../report-$job.zip" . >/dev/null)
          done
          ls -la artifacts || true

      - name: Upload ZIPs to Slack (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          set -e
          shopt -s nullglob
          for zip in artifacts/report-*.zip; do
            job="${zip##*/}"
            job="${job#report-}"
            job="${job%.zip}"
            echo "Uploading $zip for job $job..."
            curl -s -F "file=@${zip}" \
                  -F "channels=${SLACK_CHANNEL_ID}" \
                  -F "initial_comment=HTML report (${job})" \
                  -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
                  https://slack.com/api/files.upload | jq .
          done

  notify-slack-main:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [smoke, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for helper script)
        uses: actions/checkout@v4

      # === 1) Descargamos sólo summaries (results.json) de cada job ===
      - name: Download smoke summary
        uses: actions/download-artifact@v4
        with:
          name: results-smoke
          path: artifacts/smoke
        continue-on-error: true

      - name: Download performance summary
        uses: actions/download-artifact@v4
        with:
          name: results-performance
          path: artifacts/performance
        continue-on-error: true

      - name: Download regression summary
        uses: actions/download-artifact@v4
        with:
          name: results-regression
          path: artifacts/regression
        continue-on-error: true

      # e2e es opcional: si existe lo descargamos, si no, seguimos
      - name: Download e2e summary (optional)
        uses: actions/download-artifact@v4
        with:
          name: results-e2e
          path: artifacts/e2e
        continue-on-error: true

      # === 2) Construimos resumen y detectamos si hubo fallos ===
      - name: Build summary (Node)
        id: summary
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          function readJsonSafe(p) {
            try { if (fs.existsSync(p)) return JSON.parse(fs.readFileSync(p,'utf8')); }
            catch(_) {}
            return null;
          }

          const jobs = ['smoke','performance','regression','e2e'];
          const perJob = {};
          const total = { passed:0, failed:0, flaky:0, skipped:0, durationMs:0, tests:0 };

          function walkSuite(suite, acc) {
            if (!suite) return;
            if (suite.specs) {
              for (const spec of suite.specs) {
                for (const test of spec.tests || []) {
                  const results = test.results || [];
                  const last = results[results.length - 1] || {};
                  const status = last.status || test.status || 'skipped';
                  acc.tests += 1;
                  if (status === 'passed') acc.passed += 1;
                  else if (status === 'failed') acc.failed += 1;
                  else if (status === 'flaky') acc.flaky += 1;
                  else acc.skipped += 1;
                  const d = (last.duration || last.durationMs || 0);
                  acc.durationMs += d;
                }
              }
            }
            for (const child of (suite.suites || [])) walkSuite(child, acc);
          }

          for (const job of jobs) {
            const jsonPath = path.join('artifacts', job, 'results.json');
            const data = readJsonSafe(jsonPath);
            if (!data) continue;
            const acc = { passed:0, failed:0, flaky:0, skipped:0, durationMs:0, tests:0 };
            for (const s of (data.suites || [])) walkSuite(s, acc);
            perJob[job] = acc;
            total.passed += acc.passed;
            total.failed += acc.failed;
            total.flaky  += acc.flaky;
            total.skipped+= acc.skipped;
            total.tests  += acc.tests;
            total.durationMs += acc.durationMs;
          }

          function fmt(ms){
            const s = Math.round(ms/1000);
            const m = Math.floor(s/60);
            const r = s % 60;
            return `${m}m ${r}s`;
          }

          let lines = [];
          lines.push(`*Playwright summary – ${new Date().toISOString()}*`);
          lines.push(`*Total:* ${total.tests} tests | ✅ ${total.passed}  ❌ ${total.failed}  ~ ${total.flaky}  ⏭️ ${total.skipped} | ⏱ ${fmt(total.durationMs)}`);
          for (const job of Object.keys(perJob)) {
            const a = perJob[job];
            lines.push(`• *${job}*: ${a.tests} | ✅ ${a.passed}  ❌ ${a.failed}  ⏭️ ${a.skipped} | ⏱ ${fmt(a.durationMs)}`);
          }

          const summary = lines.join('\n');
          const hasFailures = total.failed > 0 ? 'true' : 'false';

          // Export outputs
          const out = process.env.GITHUB_OUTPUT;
          fs.appendFileSync(out, `summary<<EOF\n${summary}\nEOF\n`);
          fs.appendFileSync(out, `has_failures=${hasFailures}\n`);
          NODE

      # === 3) Publicamos SIEMPRE el resumen a Slack ===
      - name: Post summary to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SUMMARY: ${{ steps.summary.outputs.summary }}
        run: |
          jq -n --arg channel "$SLACK_CHANNEL_ID" --arg text "$SUMMARY" '{
            "channel": $channel,
            "text": $text
          }' > payload.json

          curl -s -X POST "https://slack.com/api/chat.postMessage" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data @payload.json \
          | jq .

      # === 4) Solo si hubo fallos: descargamos reports, zipeamos y subimos a Slack ===
      - name: Download smoke report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-smoke
          path: artifacts/smoke/report
        continue-on-error: true

      - name: Download performance report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-performance
          path: artifacts/performance/report
        continue-on-error: true

      - name: Download regression report (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-regression
          path: artifacts/regression/report
        continue-on-error: true

      - name: Download e2e report (on failure, optional)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-e2e
          path: artifacts/e2e/report
        continue-on-error: true

      - name: Zip reports (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        run: |
          set -e
          shopt -s nullglob
          for dir in artifacts/*/report; do
            job=$(basename "$(dirname "$dir")")
            (cd "$dir" && zip -r "../../report-$job.zip" . >/dev/null)
          done
          ls -la artifacts || true

      - name: Upload ZIPs to Slack (on failure)
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          set -e
          shopt -s nullglob
          for zip in artifacts/report-*.zip; do
            job="${zip##*/}"
            job="${job#report-}"
            job="${job%.zip}"
            echo "Uploading $zip for job $job..."
            curl -s -F "file=@${zip}" \
                  -F "channels=${SLACK_CHANNEL_ID}" \
                  -F "initial_comment=HTML report (${job})" \
                  -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
                  https://slack.com/api/files.upload | jq .
          done
